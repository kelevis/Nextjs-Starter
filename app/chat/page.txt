"use client"

import { useEffect, useState } from 'react';

interface Message {
    targetUserId: string;
    content: string;
}

export default function Home() {
    const [socket, setSocket] = useState<WebSocket | null>(null);
    const [messages, setMessages] = useState<string[]>([]);
    const [message, setMessage] = useState<string>('');
    const [targetUserId, setTargetUserId] = useState<string>('');
    const [userId, setUserId] = useState<string>(''); // 用户输入的 userId
    const [connected, setConnected] = useState<boolean>(false); // 判断是否已连接

    useEffect(() => {
        if (userId) {  // 在用户输入 userId 后再建立连接
            const ws = new WebSocket(`ws://localhost:8080/ws/${userId}`);

            ws.onopen = () => {
                console.log('Connected to WebSocket server');
                setConnected(true);
            };

            ws.onmessage = (event) => {
                const messageData: Message = JSON.parse(event.data);
                setMessages((prevMessages) => [...prevMessages, `${messageData.targetUserId}: ${messageData.content}`]);
            };

            ws.onclose = () => {
                console.log('Disconnected from WebSocket server');
                setConnected(false);
            };

            setSocket(ws);

            return () => {
                ws.close();
            };
        }
    }, [userId]); // 依赖 userId，当 userId 变化时重新执行

    const sendMessage = () => {
        if (socket && message && targetUserId) {
            const msg: Message = {
                targetUserId: targetUserId,
                content: message,
            };
            socket.send(JSON.stringify(msg));
            setMessages((prevMessages) => [...prevMessages, `Me: ${message}`]);
            setMessage('');
        }
    };

    return (
        <div>
            {!connected && (
                <div>
                    <h1>Enter your User ID to connect</h1>
                    <input
                        type="text"
                        placeholder="Your User ID"
                        value={userId}
                        onChange={(e) => setUserId(e.target.value)}
                    />
                </div>
            )}
            {connected && (
                <div>
                    <h1>WebSocket Chat</h1>
                    <input
                        type="text"
                        placeholder="Target User ID"
                        value={targetUserId}
                        onChange={(e) => setTargetUserId(e.target.value)}
                    />
                    <input
                        type="text"
                        placeholder="Enter a message"
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
                    />
                    <button onClick={sendMessage}>Send</button>
                    <ul>
                        {messages.map((msg, index) => (
                            <li key={index}>{msg}</li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}
